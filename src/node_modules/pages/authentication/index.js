import React, {useEffect, useState, useContext} from "react";
import {Container, Row, Col, FormGroup, Form, Button} from "reactstrap";
import {Link, Redirect} from "react-router-dom";
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import {CurrentUserContext} from 'context/currentUser';
import BackendErrorMessages from 'pages/authentication/components/BackendErrorMessages';

export const Authentication = ({location: {pathname}}) => {
  const isLogin = pathname === '/login';
  const pageTitle = isLogin ? 'Sign In' : 'Sign Up';
  const descriptionLink = isLogin ? '/register' : '/login';
  const descriptionText = isLogin ? 'Need an account?' : 'Have an account?';
  const apiUrl = isLogin ? '/users/login' : '/users';
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [{response, isLoading, error}, doFetch] = useFetch(apiUrl);
  const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false);
  const [, setToken] = useLocalStorage('token');
  const [, setCurrentUserState] = useContext(CurrentUserContext);

  const handleSubmit = (evt) => {
    evt.preventDefault();
    const user = isLogin ? {email, password} : {email, password, username};
    doFetch({
      method: 'post',
      data: {
        user
      }
    })
  };

  useEffect(() => {
    if (!response) return;

    setToken(response.user.token);
    setIsSuccessFullSubmit(true);
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user,
    }));
  }, [response, setToken, setCurrentUserState]);

  if (isSuccessFullSubmit)
    return <Redirect to={'/'}/>;

  return (
    <div className={'auth-page'}>
      <Container className={'page'}>
        <Row>
          <Col md={'6'}
               xs={'12'}
               className={'offset-md-3'}>
            <h1 className={'text-cs-center'}>{pageTitle}</h1>
            <p className={'text-xs-center'}>
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <Form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages errors={error.errors}/>}
              <fieldset>
                {!isLogin && (
                  <FormGroup>
                    <input type="text"
                           autoComplete={'username'}
                           className={'form-control form-control-lg'}
                           placeholder={'username'}
                           value={username}
                           onChange={e => setUsername(e.target.value)}/>
                  </FormGroup>
                )}
                <FormGroup>
                  <input type="email"
                         autoComplete={'email'}
                         className={'form-control form-control-lg'}
                         placeholder={'email'}
                         value={email}
                         onChange={e => setEmail(e.target.value)}/>
                </FormGroup>
                <FormGroup>
                  <input type="password"
                         autoComplete={'password'}
                         className={'form-control form-control-lg'}
                         placeholder={'password'}
                         value={password}
                         onChange={e => setPassword(e.target.value)}/>
                </FormGroup>
              </fieldset>
              <Button color={'primary'}
                      className={'btn-lg pull-xs-right'}
                      type={'submit'}
                      disabled={isLoading}>
                {pageTitle}
              </Button>
            </Form>
          </Col>
        </Row>
      </Container>
    </div>
  )
};
